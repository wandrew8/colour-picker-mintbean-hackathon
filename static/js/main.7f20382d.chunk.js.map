{"version":3,"sources":["Colors.jsx","Palette.jsx","Navbar.jsx","App.js","serviceWorker.js","index.js"],"names":["Colors","color","useState","isSuccess","setIsSuccess","style","backgroundColor","className","data-clipboard-text","onSuccess","setTimeout","tinycolor","require","Palette","colors","colorType","variation","setting","settingValue","tetrad","analogous","monochromatic","splitcomplement","triad","complement","toHexString","colorPalette","settings","lighten","toString","brighten","darken","desaturate","saturate","undefined","Array","isArray","map","t","hexColor","rgbColor","toRgbString","getAlpha","id","hex","Settings","changeColor","changeVariation","changeSetting","changeColorType","changeSettingValue","handleChangeColorType","type","Navbar","expand","bg","variant","Nav","Toggle","aria-controls","Collapse","Brand","NavDropdown","onSelect","e","title","Item","eventKey","Divider","Link","onClick","randomColor","random","setRandom","Form","onChange","preventDefault","target","value","handleHexChange","inline","Label","fontSize","cursor","FormControl","opacity","App","setColorType","ChangeColor","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.7f20382d.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport Clipboard from 'react-clipboard.js';\n\nexport default function Colors({ color }) {\n  const [ isSuccess, setIsSuccess ] = useState(false);\n  const onSuccess = () => {\n    setTimeout(() => {\n      setIsSuccess(false);\n    }, 500);\n    setIsSuccess(true);\n  }\n  return (\n    <div style={{ backgroundColor: color }} className=\"color\">\n      <div>\n        <Clipboard className=\"clipboard\" data-clipboard-text={color} onSuccess={onSuccess}>\n        {isSuccess ? \"Copied!\" : \"Copy to Clipboard\"}\n        </Clipboard>\n        <div className=\"hex-value\">{color}</div>\n      </div>\n    </div>\n  );\n}\n","import React from \"react\";\nimport Colors from \"./Colors\";\nimport \"./Palette.css\";\n\nconst tinycolor = require(\"tinycolor2\");\n\nexport default function Palette({ isSuccess, setIsSuccess, color, colorType, variation, setting, settingValue }) {\n  let colors;\n  // Using a switch to set variation type set\n  switch (variation) {\n    case \"tetrad\":\n      colors = tinycolor(color).tetrad();\n      break;\n    case \"analogous\":\n      colors = tinycolor(color).analogous();\n      break;\n    case \"monochromatic\":\n      colors = tinycolor(color).monochromatic();\n      break;\n    case \"splitcomplement\":\n      colors = tinycolor(color).splitcomplement();\n      break;\n    case \"triad\":\n      colors = tinycolor(color).triad();\n      break;\n    case \"tetrad\":\n      colors = tinycolor(color).tetrad();\n      break;\n    case \"complement\":\n      colors = tinycolor(color).complement().toHexString();\n      break;\n  }\n\n  // Using a dictionary object to set setting\n  const settings = color => {\n    const converter = {\n      lighten: tinycolor(color).lighten(settingValue).toString(),\n      brighten: tinycolor(color).brighten(settingValue).toString(),\n      darken: tinycolor(color).darken(settingValue).toString(),\n      desaturate: tinycolor(color).desaturate(settingValue).toString(),\n      saturate: tinycolor(color).saturate(settingValue).toString(),\n      undefined: color,\n    };\n\n    return converter[setting];\n  };\n\n  let colorPalette;\n  if (!Array.isArray(colors)) {\n    return <Colors hex={colors} />;\n  } else {\n    colorPalette = colors.map(t => {\n      let hexColor = t.toHexString();\n      let rgbColor = t.toRgbString();\n      t.getAlpha();\n      rgbColor = settings(rgbColor);\n      hexColor = settings(hexColor);\n\n      return <Colors \n        isSuccess={isSuccess}\n        setIsSuccess={setIsSuccess}\n        color={colorType === \"rgb\" ? rgbColor : hexColor} />;\n    });\n  }\n\n  return <div id=\"container\">{colorPalette}</div>;\n}\n","import React from \"react\";\nimport { Navbar, Form, Nav, FormControl, NavDropdown } from \"react-bootstrap\";\nconst tinycolor = require(\"tinycolor2\");\n\nexport default function Settings({\n  changeColor,\n  changeVariation,\n  changeSetting,\n  changeSettingValue,\n  changeColorType,\n  colorType\n}) {\n  const handleHexChange = e => {\n    e.preventDefault();\n    changeColor(e.target.value);\n  };\n\n  const handleVariationChange = variation => {\n    changeVariation(variation);\n  };\n\n  const changeSettings = setting => {\n    changeSetting(setting);\n  };\n\n  const handleChangeColorType = type => {\n    changeColorType(type);\n  }\n\n  const setRandom = () => {\n    const randomColor = tinycolor.random().toHexString();\n    changeColor(randomColor);\n  };\n\n  const handleSettingValueChange = e => {\n    changeSettingValue(e);\n  };\n\n  return (\n    <div>\n      <Navbar expand=\"lg\" bg=\"dark\" variant=\"dark\">\n        <Nav className=\"mr-auto\">\n          <Navbar.Toggle aria-controls=\"responsive-navbar-nav\" />\n\n          <Navbar.Collapse id=\"responsive-navbar-nav\">\n            <Navbar.Brand>Color Palette Generator</Navbar.Brand>\n            <NavDropdown\n              onSelect={e => handleVariationChange(e)}\n              title=\"Variation\"\n              id=\"variation\"\n            >\n              <NavDropdown.Item eventKey=\"analogous\">\n                Analogous\n              </NavDropdown.Item>\n              <NavDropdown.Divider />\n\n              <NavDropdown.Item eventKey=\"monochromatic\">\n                Monochromatic\n              </NavDropdown.Item>\n              <NavDropdown.Divider />\n\n              <NavDropdown.Item eventKey=\"complement\">\n                Complement\n              </NavDropdown.Item>\n              <NavDropdown.Item eventKey=\"splitcomplement\">\n                Split Complement\n              </NavDropdown.Item>\n              <NavDropdown.Divider />\n              <NavDropdown.Item eventKey=\"triad\">Triad</NavDropdown.Item>\n              <NavDropdown.Item eventKey=\"tetrad\">Tetrad</NavDropdown.Item>\n            </NavDropdown>\n            <NavDropdown.Divider />\n    \n            <NavDropdown\n              onSelect={e => changeSettings(e)}\n              title=\"Settings\"\n              id=\"settings\"\n            >\n              <NavDropdown.Item eventKey=\"lighten\">\n                  Lighten\n              </NavDropdown.Item>\n              <NavDropdown.Divider />\n\n              <NavDropdown.Item eventKey=\"brighten\">\n                  Brighten\n              </NavDropdown.Item>\n              <NavDropdown.Divider />\n\n              <NavDropdown.Item eventKey=\"darken\">\n                  Darken\n              </NavDropdown.Item>\n              <NavDropdown.Divider />\n\n              <NavDropdown.Item eventKey=\"desaturate\">\n                  Desaturate\n              </NavDropdown.Item>\n              <NavDropdown.Divider />\n\n              <NavDropdown.Item eventKey=\"saturate\">\n                  Saturate\n              </NavDropdown.Item>\n            </NavDropdown>\n            <Nav.Link \n              onClick={() => handleChangeColorType(\"rgb\")}\n              className={colorType === \"rgb\" ? \"active\" : null}>\n              RGB\n            </Nav.Link>\n            <Nav.Link \n              onClick={() => handleChangeColorType(\"hex\")}\n              className={colorType === \"hex\" ? \"active\" : null}>\n              Hex\n            </Nav.Link>\n          </Navbar.Collapse>\n        </Nav>\n        <Nav.Link id=\"random\" onClick={() => setRandom()}>\n          Random\n        </Nav.Link>\n        <Form onChange={e => handleHexChange(e)} inline>\n          <Form.Label style={{fontSize: \"2rem\", cursor: \"pointer\"}}>🎨\n          <FormControl style={{opacity: 0}} type=\"color\" />\n          </Form.Label>\n        </Form>\n      </Navbar>\n    </div>\n  );\n}\n","import React, { useState } from \"react\";\nimport \"./App.scss\";\nimport Palette from \"./Palette\";\nimport Settings from \"./Navbar\";\n\nfunction App() {\n  const [ colorType, setColorType ] = useState('hex');\n  const [ color, ChangeColor ] = useState(\"#8feaff\");\n  const [ variation, changeVariation ] = useState(\"tetrad\");\n  const [ setting, changeSetting ] = useState();\n  const [ settingValue, changeSettingValue ] = useState(20);\n\n  return (\n    <div className=\"App\">\n      <Settings\n        changeColorType={setColorType}\n        changeSetting={changeSetting}\n        changeVariation={changeVariation}\n        changeColor={ChangeColor}\n        changeSettingValue={changeSettingValue}\n        colorType={colorType}\n      />\n      <Palette\n        colorType={colorType}\n        settingValue={settingValue}\n        setting={setting}\n        variation={variation}\n        color={color}\n      />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}